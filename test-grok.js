const io = require('socket.io-client');

async function testGrokConnection() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Grok —á–µ—Ä–µ–∑ OpenRouter...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await fetch('http://localhost:3000/test/create-user', { method: 'POST' });
    const userData = await userResponse.json();
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userData.userId);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
    const sessionResponse = await fetch('http://localhost:3000/test/create-session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: userData.userId })
    });
    const sessionData = await sessionResponse.json();
    console.log('üí¨ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', sessionData.sessionId);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...');
    const socket = io('http://localhost:3000/chat');

    socket.on('connect', () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, ID:', socket.id);

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–µ—Å—Å–∏–∏
        socket.emit('join_session', { sessionId: sessionData.sessionId });
        console.log('üè† –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏:', sessionData.sessionId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(() => {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Grok...');
            socket.emit('chat:message', {
                sessionId: sessionData.sessionId,
                text: '–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∫—Ä–∞—Ç–∫–æ.'
            });
        }, 1000);
    });

    socket.on('message', (data) => {
        console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ [${data.role}]:`, data.content);

        if (data.role === 'assistant') {
            console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:', {
                model: data.model,
                provider: data.provider,
                usage: data.usage
            });

            if (data.usage) {
                console.log(`üìä –¢–æ–∫–µ–Ω—ã: ${data.usage.total_tokens} (–≤–æ–ø—Ä–æ—Å: ${data.usage.prompt_tokens}, –æ—Ç–≤–µ—Ç: ${data.usage.completion_tokens})`);
            }
        }
    });

    socket.on('typing', (data) => {
        if (data.isTyping) {
            console.log('‚å®Ô∏è Grok –ø–µ—á–∞—Ç–∞–µ—Ç...');
        } else {
            console.log('‚å®Ô∏è –ü–µ—á–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
    });

    socket.on('disconnect', () => {
        console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        console.log('‚è∞ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç...');
        socket.disconnect();
        process.exit(0);
    }, 30000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGrokConnection().catch(console.error);