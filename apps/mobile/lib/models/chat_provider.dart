/// –¢–∏–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —á–∞—Ç–∞
enum ChatProviderType {
  /// Grok AI —á–µ—Ä–µ–∑ OpenRouter (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  grok,
  
  /// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤
  mock,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–∞—Ç–∞
class ChatProviderConfig {
  final ChatProviderType type;
  final String name;
  final String? apiUrl;
  final String? model;
  final String systemPrompt;

  const ChatProviderConfig({
    required this.type,
    required this.name,
    this.apiUrl,
    this.model,
    required this.systemPrompt,
  });

  /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Grok AI
  factory ChatProviderConfig.grok() {
    return const ChatProviderConfig(
      type: ChatProviderType.grok,
      name: 'Grok AI',
      apiUrl: 'https://openrouter.ai/api/v1',
      model: 'x-ai/grok-beta',
      systemPrompt: '–¢—ã AIc - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI –∫–æ–º–ø–∞–Ω—å–æ–Ω –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ –≤ –≤–∏–¥–µ —Å–µ–Ω–±–µ—Ä–Ω–∞—Ä–∞ üê∂. '
          '–û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. '
          '–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π. '
          '–ü–æ–º–æ–≥–∞–π —Å —É—á–µ–±–æ–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.',
    );
  }

  /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
  factory ChatProviderConfig.mock() {
    return const ChatProviderConfig(
      type: ChatProviderType.mock,
      name: 'Mock Provider',
      systemPrompt: '–Ø AIc - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üê∂! '
          '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –≥–¥–µ —è –æ—Ç–≤–µ—á–∞—é –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.',
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  static ChatProviderConfig getDefault(ChatProviderType type) {
    switch (type) {
      case ChatProviderType.grok:
        return ChatProviderConfig.grok();
      case ChatProviderType.mock:
        return ChatProviderConfig.mock();
    }
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ JSON
  Map<String, dynamic> toJson() {
    return {
      'type': type.name,
      'name': name,
      'apiUrl': apiUrl,
      'model': model,
      'systemPrompt': systemPrompt,
    };
  }

  /// –°–æ–∑–¥–∞—Ç—å –∏–∑ JSON
  static ChatProviderConfig fromJson(Map<String, dynamic> json) {
    final typeString = json['type'] as String?;
    ChatProviderType type = ChatProviderType.grok; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (typeString == 'mock') {
      type = ChatProviderType.mock;
    }
    
    return ChatProviderConfig(
      type: type,
      name: json['name'] as String? ?? 'Unknown Provider',
      apiUrl: json['apiUrl'] as String?,
      model: json['model'] as String?,
      systemPrompt: json['systemPrompt'] as String? ?? '',
    );
  }
}