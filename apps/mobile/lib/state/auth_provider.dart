import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/auth_service.dart';

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è AuthService (singleton)
final authServiceProvider = Provider<AuthService>((ref) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º singleton instance
  final authService = AuthService();
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  authService.initialize();
  return authService;
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
final authStateProvider = StreamProvider<User?>((ref) {
  final authService = ref.watch(authServiceProvider);
  print('üîç authStateProvider: Creating stream for authService');
  return authService.authStateChanges;
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final currentUserProvider = Provider<User?>((ref) {
  final authState = ref.watch(authStateProvider);
  return authState.when(
    data: (user) => user,
    loading: () => null,
    error: (error, stack) => null,
  );
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
final isAuthenticatedProvider = Provider<bool>((ref) {
  final user = ref.watch(currentUserProvider);
  return user != null;
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final isAnonymousProvider = Provider<bool>((ref) {
  final user = ref.watch(currentUserProvider);
  return user?.isAnonymous ?? false;
});

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class AuthController extends StateNotifier<AsyncValue<void>> {
  AuthController(this._authService) : super(const AsyncValue.data(null));

  final AuthService _authService;

  // –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  Future<User?> signInAnonymously() async {
    try {
      final user = await _authService.signInAnonymously();
      return user;
    } catch (error) {
      rethrow;
    }
  }

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  Future<User?> signInWithGoogle() async {
    try {
      final user = await _authService.signInWithGoogle();
      return user;
    } catch (error) {
      rethrow;
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
  Future<User?> signUp({
    required String email,
    required String password,
    String? displayName,
  }) async {
    try {
      final user = await _authService.signUpWithEmailAndPassword(
        email: email,
        password: password,
        displayName: displayName,
      );
      return user;
    } catch (error) {
      rethrow;
    }
  }

  // –í—ã—Ö–æ–¥
  Future<void> signOut() async {
    state = const AsyncValue.loading();
    try {
      await _authService.signOut();
      state = const AsyncValue.data(null);
    } catch (error, stack) {
      state = AsyncValue.error(error, stack);
    }
  }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
final authControllerProvider = StateNotifierProvider<AuthController, AsyncValue<void>>((ref) {
  final authService = ref.watch(authServiceProvider);
  return AuthController(authService);
});