import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/api_client_simple.dart';
import '../config/api_config.dart';

class NetworkDiagnosticsPage extends ConsumerStatefulWidget {
  const NetworkDiagnosticsPage({Key? key}) : super(key: key);

  @override
  ConsumerState<NetworkDiagnosticsPage> createState() => _NetworkDiagnosticsPageState();
}

class _NetworkDiagnosticsPageState extends ConsumerState<NetworkDiagnosticsPage> {
  String _diagnosticResults = '–ì–æ—Ç–æ–≤ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ...';
  bool _isRunning = false;

  Future<void> _runDiagnostics() async {
    setState(() {
      _isRunning = true;
      _diagnosticResults = '–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...\n';
    });

    final buffer = StringBuffer();
    buffer.writeln('=== –°–ï–¢–ï–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
    buffer.writeln('–í—Ä–µ–º—è: ${DateTime.now()}');
    buffer.writeln('');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    buffer.writeln('üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:');
    buffer.writeln('–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: ${ApiConfig.currentServerName}');
    buffer.writeln('URL: ${ApiConfig.baseUrl}');
    buffer.writeln('WebSocket: ${ApiConfig.wsUrl}');
    buffer.writeln('');

    setState(() => _diagnosticResults = buffer.toString());

    try {
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
      buffer.writeln('üè• –ü–†–û–í–ï–†–ö–ê HEALTH ENDPOINT:');
      final apiClient = ref.read(apiClientProvider);
      final healthResponse = await apiClient.checkConnection();
      
      if (healthResponse != null) {
        buffer.writeln('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
        buffer.writeln('–û—Ç–≤–µ—Ç: $healthResponse');
      } else {
        buffer.writeln('‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      buffer.writeln('');

      setState(() => _diagnosticResults = buffer.toString());

      // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
      buffer.writeln('üí¨ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –°–ï–°–°–ò–ò –ß–ê–¢–ê:');
      final sessionResponse = await apiClient.createChatSession();
      
      if (sessionResponse != null && sessionResponse.containsKey('sessionId')) {
        buffer.writeln('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        buffer.writeln('ID —Å–µ—Å—Å–∏–∏: ${sessionResponse['sessionId']}');
        
        setState(() => _diagnosticResults = buffer.toString());

        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        buffer.writeln('');
        buffer.writeln('üì§ –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø:');
        final messageResponse = await apiClient.sendChatMessage(
          sessionResponse['sessionId'], 
          '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
        );
        
        if (messageResponse != null && messageResponse['content'] != null) {
          buffer.writeln('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç');
          buffer.writeln('–û—Ç–≤–µ—Ç: ${messageResponse['content']}');
        } else {
          buffer.writeln('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
          buffer.writeln('–û—Ç–≤–µ—Ç: $messageResponse');
        }
      } else {
        buffer.writeln('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é');
        buffer.writeln('–û—Ç–≤–µ—Ç: $sessionResponse');
      }

    } catch (e) {
      buffer.writeln('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:');
      buffer.writeln('–¢–∏–ø: ${e.runtimeType}');
      buffer.writeln('–°–æ–æ–±—â–µ–Ω–∏–µ: $e');
    }

    buffer.writeln('');
    buffer.writeln('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');

    setState(() {
      _diagnosticResults = buffer.toString();
      _isRunning = false;
    });
  }

  Future<void> _testDifferentServers() async {
    setState(() {
      _isRunning = true;
      _diagnosticResults = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...\n';
    });

    final buffer = StringBuffer();
    buffer.writeln('=== –¢–ï–°–¢ –†–ê–ó–ù–´–• –°–ï–†–í–ï–†–û–í ===');
    
    // –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    final serversToTest = [
      {'name': 'Mac Local (3001)', 'url': 'http://192.168.68.65:3001'},
      {'name': 'Mac Local (3000)', 'url': 'http://192.168.68.65:3000'},
      {'name': 'Beget Hosting', 'url': 'https://konans6z.beget.tech'},
    ];

    for (final server in serversToTest) {
      buffer.writeln('');
      buffer.writeln('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${server['name']}');
      buffer.writeln('URL: ${server['url']}');
      
      setState(() => _diagnosticResults = buffer.toString());

      try {
        final testClient = ApiClient(server['url']!);
        final healthResponse = await testClient.checkConnection();
        
        if (healthResponse != null) {
          buffer.writeln('‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω');
        } else {
          buffer.writeln('‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } catch (e) {
        buffer.writeln('‚ùå –û—à–∏–±–∫–∞: $e');
      }
      
      setState(() => _diagnosticResults = buffer.toString());
    }

    buffer.writeln('');
    buffer.writeln('=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');

    setState(() {
      _diagnosticResults = buffer.toString();
      _isRunning = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–°–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'),
        backgroundColor: Colors.orange,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: _isRunning ? null : _runDiagnostics,
                    child: _isRunning 
                        ? const SizedBox(
                            height: 20,
                            width: 20,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                        : const Text('–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É'),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton(
                    onPressed: _isRunning ? null : _testDifferentServers,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                    ),
                    child: const Text('–¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤'),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            Expanded(
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: SingleChildScrollView(
                  child: Text(
                    _diagnosticResults,
                    style: const TextStyle(
                      fontFamily: 'monospace',
                      fontSize: 12,
                    ),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text(
              '1. "–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É" - –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä\n'
              '2. "–¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤" - –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã\n'
              '3. –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–≤–∞—é—Ç—Å—è, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–µ—Ç–∏\n'
              '4. –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ Beget - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ',
              style: TextStyle(fontSize: 14),
            ),
          ],
        ),
      ),
    );
  }
}