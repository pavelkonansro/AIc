import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_chat_ui/flutter_chat_ui.dart';
import 'package:flutter_chat_types/flutter_chat_types.dart' as types;
import 'package:uuid/uuid.dart';
import 'package:socket_io_client/socket_io_client.dart' as io;
import '../../services/api_client_simple.dart';
import '../../components/main_navigation.dart';

// Provider –¥–ª—è —Å–æ–∫–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
final socketProvider = StateProvider<io.Socket?>((ref) => null);

// Provider –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
final connectionStateProvider = StateProvider<String>((ref) => '–û—Ç–∫–ª—é—á–µ–Ω');

// Provider –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
final chatMessagesProvider = StateProvider<List<types.Message>>((ref) => []);

class RealChatPage extends ConsumerStatefulWidget {
  const RealChatPage({super.key});

  @override
  ConsumerState<RealChatPage> createState() => _RealChatPageState();
}

class _RealChatPageState extends ConsumerState<RealChatPage> {
  final _user = const types.User(id: 'user', firstName: '–¢—ã');
  final _assistant = const types.User(id: 'assistant', firstName: 'AIc');
  String? _authToken;
  String? _sessionId;

  @override
  void initState() {
    super.initState();
    _initializeChat();
  }

  @override
  void dispose() {
    _disconnectSocket();
    super.dispose();
  }

  Future<void> _initializeChat() async {
    ref.read(loadingProvider.notifier).state = true;
    ref.read(connectionStateProvider.notifier).state = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';

    try {
      // 1. –°–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final apiClient = ref.read(apiClientProvider);
      final guestUser = await apiClient.createGuestUser();

      if (guestUser != null) {
        _authToken = guestUser['token'];
        apiClient.setToken(_authToken!);

        // 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∫–µ—Ç—É
        await _connectSocket();

        // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        _addWelcomeMessage();

        ref.read(connectionStateProvider.notifier).state = '–ü–æ–¥–∫–ª—é—á–µ–Ω';
      } else {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (e) {
      ref.read(connectionStateProvider.notifier).state = '–û—à–∏–±–∫–∞: $e';
      _addErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
    } finally {
      ref.read(loadingProvider.notifier).state = false;
    }
  }

  Future<void> _connectSocket() async {
    final socket = io.io('http://192.168.68.65:3000',
      io.OptionBuilder()
        .setTransports(['websocket'])
        .enableAutoConnect()
        .setExtraHeaders({'Authorization': 'Bearer $_authToken'})
        .build()
    );

    socket.onConnect((_) {
      print('‚úÖ –°–æ–∫–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      ref.read(connectionStateProvider.notifier).state = '–ü–æ–¥–∫–ª—é—á–µ–Ω';
    });

    socket.onDisconnect((_) {
      print('‚ùå –°–æ–∫–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
      ref.read(connectionStateProvider.notifier).state = '–û—Ç–∫–ª—é—á–µ–Ω';
    });

    socket.on('message', (data) {
      _handleIncomingMessage(data);
    });

    socket.on('error', (error) {
      print('üî¥ –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: $error');
      ref.read(connectionStateProvider.notifier).state = '–û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞';
    });

    ref.read(socketProvider.notifier).state = socket;
  }

  void _disconnectSocket() {
    final socket = ref.read(socketProvider);
    socket?.disconnect();
    ref.read(socketProvider.notifier).state = null;
  }

  void _addWelcomeMessage() {
    final welcomeMessage = types.TextMessage(
      author: _assistant,
      createdAt: DateTime.now().millisecondsSinceEpoch,
      id: const Uuid().v4(),
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø AIc - —Ç–≤–æ–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω. –ö–∞–∫ –¥–µ–ª–∞? üòä\n\n–Ø –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è –∏ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!',
    );

    final messages = ref.read(chatMessagesProvider);
    ref.read(chatMessagesProvider.notifier).state = [welcomeMessage, ...messages];
  }

  void _addErrorMessage(String errorText) {
    final errorMessage = types.TextMessage(
      author: _assistant,
      createdAt: DateTime.now().millisecondsSinceEpoch,
      id: const Uuid().v4(),
      text: '‚ö†Ô∏è $errorText',
    );

    final messages = ref.read(chatMessagesProvider);
    ref.read(chatMessagesProvider.notifier).state = [errorMessage, ...messages];
  }

  void _handleIncomingMessage(dynamic data) {
    try {
      final message = types.TextMessage(
        author: _assistant,
        createdAt: DateTime.now().millisecondsSinceEpoch,
        id: const Uuid().v4(),
        text: data['content'] ?? data.toString(),
      );

      final messages = ref.read(chatMessagesProvider);
      ref.read(chatMessagesProvider.notifier).state = [message, ...messages];
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  void _handleSendPressed(types.PartialText message) {
    final textMessage = types.TextMessage(
      author: _user,
      createdAt: DateTime.now().millisecondsSinceEpoch,
      id: const Uuid().v4(),
      text: message.text,
    );

    final messages = ref.read(chatMessagesProvider);
    ref.read(chatMessagesProvider.notifier).state = [textMessage, ...messages];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
    _sendMessageToServer(message.text);
  }

  void _sendMessageToServer(String messageText) {
    final socket = ref.read(socketProvider);
    if (socket?.connected == true) {
      socket!.emit('sendMessage', {
        'content': messageText,
        'sessionId': _sessionId,
      });
    } else {
      // Fallback: –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      Future.delayed(const Duration(milliseconds: 1000), () {
        final response = types.TextMessage(
          author: _assistant,
          createdAt: DateTime.now().millisecondsSinceEpoch,
          id: const Uuid().v4(),
          text: '–ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üòî',
        );

        final messages = ref.read(chatMessagesProvider);
        ref.read(chatMessagesProvider.notifier).state = [response, ...messages];
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final messages = ref.watch(chatMessagesProvider);
    final connectionState = ref.watch(connectionStateProvider);
    final isLoading = ref.watch(loadingProvider);

    return Scaffold(
      appBar: AppBar(
        title: Column(
          children: [
            const Text('–ß–∞—Ç —Å AIc'),
            Text(
              connectionState,
              style: const TextStyle(fontSize: 12),
            ),
          ],
        ),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _initializeChat,
            tooltip: '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è',
          ),
        ],
      ),
      body: Stack(
        children: [
          Chat(
            messages: messages,
            onSendPressed: _handleSendPressed,
            user: _user,
            theme: const DefaultChatTheme(
              backgroundColor: Colors.white,
              primaryColor: Colors.blue,
              secondaryColor: Color(0xFFF5F5F5),
              inputBackgroundColor: Color(0xFFF8F8F8),
            ),
            showUserAvatars: true,
            showUserNames: true,
            emptyState: Container(
              padding: const EdgeInsets.all(20),
              child: const Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.chat_bubble_outline,
                    size: 64,
                    color: Colors.grey,
                  ),
                  SizedBox(height: 16),
                  Text(
                    '–ù–∞—á–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å AIc!',
                    style: TextStyle(
                      fontSize: 18,
                      color: Colors.grey,
                    ),
                  ),
                ],
              ),
            ),
          ),
          if (isLoading)
            Container(
              color: Colors.black.withOpacity(0.3),
              child: const Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text(
                      '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AIc...',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
    );
  }
}