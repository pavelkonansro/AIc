import 'dart:math';
import 'package:flutter_chat_types/flutter_chat_types.dart' as types;
import 'package:logger/logger.dart';
import 'chat_adapter_interface.dart';
import '../../models/chat_provider.dart';

/// Mock —á–∞—Ç –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
class MockChatAdapter implements ChatAdapter {
  final Logger _logger = Logger();
  
  String? _sessionId;
  ChatProviderConfig? _config;
  Function(types.Message)? _onMessageReceived;
  Function(String)? _onError;
  Function(bool)? _onConnectionStatusChanged;
  Function(Map<String, dynamic>)? _onStatsUpdated;

  bool _isConnected = false;
  int _messagesCount = 0;
  DateTime? _lastMessageTime;

  final List<String> _mockResponses = [
    '–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ –¥–µ–ª–∞? –Ø –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–º–æ—á—å!',
    '–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è ü§ó –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º.',
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î –ê —á—Ç–æ —Ç—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?',
    '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üí° –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ.',
    '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π!',
    '–•–º, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞ üßê –ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?',
    '–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º! üåü –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ—é –∑—Ä–µ–ª–æ—Å—Ç—å.',
    '–ü–æ–Ω–∏–º–∞—é, –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ üòî –ù–æ –º—ã –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ!',
    '–û—Ç–ª–∏—á–Ω–æ! üéâ –Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –¥–µ–ª–∏—à—å—Å—è —Å–æ –º–Ω–æ–π —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏.',
    '–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞ üíô –ú–Ω–æ–≥–∏–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ –ø—Ä–æ—Ö–æ–¥—è—Ç.',
  ];

  @override
  Future<void> initialize({
    required String sessionId,
    required ChatProviderConfig config,
    required Function(types.Message) onMessageReceived,
    required Function(String) onError,
    Function(bool)? onConnectionStatusChanged,
    Function(Map<String, dynamic>)? onStatsUpdated,
  }) async {
    _sessionId = sessionId;
    _config = config;
    _onMessageReceived = onMessageReceived;
    _onError = onError;
    _onConnectionStatusChanged = onConnectionStatusChanged;
    _onStatsUpdated = onStatsUpdated;

    _logger.i('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mock —á–∞—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: $sessionId');
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await Future.delayed(const Duration(milliseconds: 100));
    _isConnected = true;
    _onConnectionStatusChanged?.call(true);
    _updateStats();
    _logger.i('Mock —á–∞—Ç –∞–¥–∞–ø—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
  }

  @override
  Future<void> sendMessage(String text) async {
    if (!_isConnected) {
      _onError?.call('Mock –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    _logger.i('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Mock –∞–¥–∞–ø—Ç–µ—Ä: $text');

    try {
      // –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      final delay = 1000; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      final enableTyping = true; // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è

      if (enableTyping) {
        // –≠–º—É–ª–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await Future.delayed(Duration(milliseconds: delay ~/ 2));
      }

      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
      final random = Random();
      final responseIndex = random.nextInt(_mockResponses.length);
      final response = _mockResponses[responseIndex];

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      final personalizedResponse = _personalizeResponse(text, response);

      await Future.delayed(Duration(milliseconds: delay ~/ 2));

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è UI
      final message = types.TextMessage(
        author: const types.User(id: 'assistant', firstName: 'AIc'),
        createdAt: DateTime.now().millisecondsSinceEpoch,
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        text: personalizedResponse,
      );

      _messagesCount++;
      _lastMessageTime = DateTime.now();
      _updateStats();

      _onMessageReceived?.call(message);
      _logger.i('Mock –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: $personalizedResponse');

    } catch (e) {
      _logger.e('–û—à–∏–±–∫–∞ –≤ Mock –∞–¥–∞–ø—Ç–µ—Ä–µ: $e');
      _onError?.call('–û—à–∏–±–∫–∞ Mock –∞–¥–∞–ø—Ç–µ—Ä–∞: $e');
    }
  }

  /// –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String _personalizeResponse(String userMessage, String baseResponse) {
    final lowercaseMessage = userMessage.toLowerCase();
    
    // –†–µ–∞–∫—Ü–∏—è –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    if (lowercaseMessage.contains(RegExp(r'\b(–≥—Ä—É—Å—Ç–Ω–æ|–ø–ª–æ—Ö–æ|–ø–µ—á–∞–ª—å–Ω–æ|—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω|–¥–µ–ø—Ä–µ—Å—Å–∏—è)\b'))) {
      return '–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ üòî $baseResponse –ü–æ–º–Ω–∏ - —ç—Ç–æ –ø—Ä–æ–π–¥–µ—Ç!';
    }
    
    if (lowercaseMessage.contains(RegExp(r'\b(—Å—á–∞—Å—Ç–ª–∏–≤|—Ä–∞–¥–æ—Å—Ç–Ω–æ|–æ—Ç–ª–∏—á–Ω–æ|—Å—É–ø–µ—Ä|–∫—Ä—É—Ç–æ)\b'))) {
      return '–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —É —Ç–µ–±—è —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòÑ $baseResponse';
    }
    
    if (lowercaseMessage.contains(RegExp(r'\b(—à–∫–æ–ª–∞|—É—á–µ–±–∞|—ç–∫–∑–∞–º–µ–Ω|—É—Ä–æ–∫|–¥–æ–º–∞—à–∫–∞)\b'))) {
      return '–ê—Ö, —à–∫–æ–ª—å–Ω—ã–µ –¥–µ–ª–∞! üìö $baseResponse –£—á–µ–±–∞ –≤–∞–∂–Ω–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–¥—ã—Ö–∞—Ç—å!';
    }
    
    if (lowercaseMessage.contains(RegExp(r'\b(–¥—Ä—É–∑—å—è|–¥—Ä—É–∂–±–∞|–∫–æ–º–ø–∞–Ω–∏—è|–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ)\b'))) {
      return '–î—Ä—É–∂–±–∞ - —ç—Ç–æ –≤–∞–∂–Ω–æ! üë´ $baseResponse';
    }
    
    if (lowercaseMessage.contains(RegExp(r'\b(—Ä–æ–¥–∏—Ç–µ–ª–∏|–º–∞–º–∞|–ø–∞–ø–∞|—Å–µ–º—å—è)\b'))) {
      return '–°–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –±—ã–≤–∞—é—Ç —Å–ª–æ–∂–Ω—ã–º–∏ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ $baseResponse';
    }
    
    // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    if (lowercaseMessage.contains('?') || lowercaseMessage.startsWith(RegExp(r'\b(–∫–∞–∫|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º)\b'))) {
      return '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î $baseResponse';
    }
    
    return baseResponse;
  }

  @override
  Future<bool> checkConnection() async {
    // Mock –≤—Å–µ–≥–¥–∞ "–ø–æ–¥–∫–ª—é—á–µ–Ω"
    await Future.delayed(const Duration(milliseconds: 100));
    return _isConnected;
  }

  @override
  Map<String, dynamic> getStats() {
    return ChatStats(
      model: 'Mock Chat Bot',
      isConnected: _isConnected,
      totalTokens: 0, // Mock –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      messagesCount: _messagesCount,
      lastMessageTime: _lastMessageTime,
    ).toMap();
  }

  void _updateStats() {
    _onStatsUpdated?.call(getStats());
  }

  @override
  void dispose() {
    _logger.i('Mock —á–∞—Ç –∞–¥–∞–ø—Ç–µ—Ä –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
    _isConnected = false;
    _onConnectionStatusChanged?.call(false);
    _sessionId = null;
    _config = null;
    _onMessageReceived = null;
    _onError = null;
    _onConnectionStatusChanged = null;
    _onStatsUpdated = null;
  }
}