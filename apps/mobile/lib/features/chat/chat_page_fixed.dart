import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:socket_io_client/socket_io_client.dart' as socket_io;
import '../../utils/string_utils.dart';

class ChatPageFixed extends StatefulWidget {
  final String? initialMessage;
  final Map<String, dynamic>? context;

  const ChatPageFixed({
    super.key,
    this.initialMessage,
    this.context,
  });

  @override
  State<ChatPageFixed> createState() => _ChatPageFixedState();
}

class _ChatPageFixedState extends State<ChatPageFixed> {
  final _controller = TextEditingController();
  late final List<Map<String, String>> _messages;
  socket_io.Socket? _socket;
  String? _sessionId;
  bool _isConnected = false;
  bool _isLoading = false;
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  String _currentModel = '–ó–∞–≥—Ä—É–∑–∫–∞...';
  int _totalTokens = 0;
  bool _debugMode = true; // –í–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

  bool get _hasSelectedTopic => widget.initialMessage != null;
  ThemeData? _theme;

  @override
  void initState() {
    super.initState();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    _messages = <Map<String, String>>[
      {
        'role': 'assistant',
        'content': _getWelcomeMessage(),
      }
    ];

    // –ï—Å–ª–∏ –µ—Å—Ç—å initialMessage, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≤ UI
    if (widget.initialMessage != null && widget.initialMessage!.trim().isNotEmpty) {
      _messages.add({'role': 'user', 'content': widget.initialMessage!});
    }

    _initSocket();
  }

  String _getWelcomeMessage() {
    if (widget.context != null) {
      final context = widget.context!;
      final category = context['category'] as String?;
      final subcategory = context['subcategory'] as String?;
      
      if (category != null && subcategory != null) {
        return '–ü—Ä–∏–≤–µ—Ç! –Ø AIc üê∂ –í–∏–∂—É, —Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è —Ç–µ–º–æ–π "$subcategory" –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "$category". –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º!';
      }
    }
    
    return '–ü—Ä–∏–≤–µ—Ç! –Ø AIc üê∂ –ö–∞–∫ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?';
  }

  Future<void> _initSocket() async {
    try {
      debugPrint('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket...');
      final prefs = await SharedPreferences.getInstance();
      _sessionId = prefs.getString('session_id');

      debugPrint('üìã Session ID: $_sessionId');

      if (_sessionId == null) {
        debugPrint('‚ùå Session ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        _showError(
            '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
        return;
      }

      debugPrint('üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...');
      _socket = socket_io.io(
          'http://192.168.68.65:3000/chat',
          socket_io.OptionBuilder()
              .setTransports(['websocket'])
              .enableAutoConnect()
              .build());

      _socket!.onConnect((_) {
        debugPrint('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        setState(() => _isConnected = true);
        if (_sessionId != null) {
          _socket!.emit('join_session', {'sessionId': _sessionId!});
          _addMessage('system', '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —á–∞—Ç—É');
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
          // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ UI, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ initState
          if (widget.initialMessage != null && widget.initialMessage!.trim().isNotEmpty) {
            Future.delayed(const Duration(milliseconds: 500), () {
              _sendMessageToServer(widget.initialMessage!);
            });
          }
        }
      });

      _socket!.onDisconnect((_) {
        debugPrint('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        if (mounted) {
          setState(() => _isConnected = false);
          _addMessage('system', '–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —á–∞—Ç—É');
        }
      });

      _socket!.on('message', (data) {
        debugPrint('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: $data');
        final role = data['role'] ?? 'assistant';
        final content = data['content'] ?? '';
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∞—Ö
        final model = data['model'] ?? '';
        final usage = data['usage'] as Map<String, dynamic>?;
        
        if (usage != null) {
          final promptTokens = usage['prompt_tokens'] ?? 0;
          final completionTokens = usage['completion_tokens'] ?? 0;
          final totalTokens = usage['total_tokens'] ?? 0;
          
          setState(() {
            _currentModel = model.isNotEmpty ? model : _currentModel;
            _totalTokens += totalTokens as int;
          });
          
          debugPrint('ü§ñ –ú–æ–¥–µ–ª—å: $model');
          debugPrint('üìä –¢–æ–∫–µ–Ω—ã - Prompt: $promptTokens, Completion: $completionTokens, Total: $totalTokens');
        }
        
        if (content.isNotEmpty) {
          _addMessage(role, content);
          debugPrint('üìù –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤');
        }
        if (mounted) {
          setState(() => _isLoading = false);
        }
      });

      _socket!.on('error', (data) {
        debugPrint('‚ùå WebSocket –æ—à–∏–±–∫–∞: $data');
        _addMessage('error', '–û—à–∏–±–∫–∞: ${data['message']}');
        if (mounted) {
          setState(() => _isLoading = false);
        }
      });
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: $e');
      _showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
    }
  }

  void _send() {
    final text = _controller.text.trim();
    if (text.isEmpty ||
        !_isConnected ||
        _isLoading ||
        _sessionId == null) {
      return;
    }

    _sendMessage(text);
  }

  void _sendMessage(String text) {
    setState(() {
      _isLoading = true;
      _controller.clear();
    });

    _addMessage('user', text);

    debugPrint('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: $text');
    debugPrint('üìã Session ID: $_sessionId');
    debugPrint('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: $_isConnected');

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    final messageData = {
      'sessionId': _sessionId!,
      'text': text,
    };

    debugPrint('üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: $messageData');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try {
      _socket!.emit('chat:message', messageData);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
      Future.delayed(const Duration(seconds: 30), () {
        if (_isLoading) {
          debugPrint('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
          setState(() => _isLoading = false);
          _addMessage('error', '–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI');
        }
      });
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: $e');
      setState(() => _isLoading = false);
      _addMessage('error', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ë–ï–ó –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ UI (–¥–ª—è initialMessage)
  void _sendMessageToServer(String text) {
    if (!_isConnected || _sessionId == null) {
      debugPrint('‚ùå –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏');
      return;
    }

    setState(() => _isLoading = true);

    debugPrint('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initialMessage –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $text');
    
    final messageData = {
      'sessionId': _sessionId!,
      'text': text,
    };

    try {
      _socket!.emit('chat:message', messageData);
      
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è initialMessage
      Future.delayed(const Duration(seconds: 30), () {
        if (_isLoading) {
          debugPrint('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ initialMessage');
          setState(() => _isLoading = false);
          _addMessage('error', '–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI');
        }
      });
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ initialMessage: $e');
      setState(() => _isLoading = false);
      _addMessage('error', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  void _addMessage(String role, String content) {
    if (mounted) {
      setState(() {
        _messages.add({'role': role, 'content': content});
      });
    }
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message)),
    );
  }

  Future<void> _logout() async {
    _socket?.disconnect();
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();

    if (mounted) {
      context.go('/');
    }
  }

  @override
  void dispose() {
    _socket?.disconnect();
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    _theme = Theme.of(context);
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: const Text('–ß–∞—Ç —Å AIc'),
        actions: [
          _StatusPill(isConnected: _isConnected),
          IconButton(
            icon: const Icon(Icons.home_rounded),
            onPressed: () => context.go('/home'),
            tooltip: '–ì–ª–∞–≤–Ω–∞—è',
          ),
          IconButton(
            icon: const Icon(Icons.favorite_outline),
            onPressed: () => context.go('/motivation'),
            tooltip: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è',
          ),
          IconButton(
            icon: const Icon(Icons.spa_rounded),
            onPressed: () {
              // TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
            },
            tooltip: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
          ),
          IconButton(
            icon: const Icon(Icons.support_agent_rounded),
            onPressed: () {
              // TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ  
            },
            tooltip: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
          ),
          IconButton(
            icon: Icon(_debugMode ? Icons.bug_report : Icons.bug_report_outlined),
            onPressed: () => setState(() => _debugMode = !_debugMode),
            tooltip: '–û—Ç–ª–∞–¥–∫–∞',
          ),
          IconButton(
            icon: const Icon(Icons.logout_rounded),
            onPressed: _logout,
            tooltip: '–í—ã–π—Ç–∏',
          ),
        ],
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Color(0xFFEEF2FF), Color(0xFFF8FAFC)],
          ),
        ),
        child: Column(
          children: [
            const SizedBox(height: kToolbarHeight + 20),
            // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å
            if (_debugMode) ...[
              Container(
                width: double.infinity,
                margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 5),
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                decoration: BoxDecoration(
                  color: Colors.black87,
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Expanded(
                      child: Row(
                        children: [
                          // –ú–æ–¥–µ–ª—å
                          Icon(Icons.psychology_outlined, color: Colors.green, size: 16),
                          const SizedBox(width: 4),
                          Text(
                            StringUtils.safeTruncate(
                              _currentModel.split('/').last.replaceAll(':', ''),
                              8,
                              ''
                            ),
                            style: const TextStyle(color: Colors.white, fontSize: 11),
                          ),
                          const SizedBox(width: 12),
                          // –¢–æ–∫–µ–Ω—ã  
                          Icon(Icons.analytics_outlined, color: Colors.blue, size: 16),
                          const SizedBox(width: 4),
                          Text(
                            '$_totalTokens',
                            style: const TextStyle(color: Colors.white, fontSize: 11),
                          ),
                          const SizedBox(width: 12),
                          // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                          Icon(
                            _isConnected ? Icons.wifi : Icons.wifi_off,
                            color: _isConnected ? Colors.green : Colors.red,
                            size: 16,
                          ),
                          const SizedBox(width: 8),
                          // –ó–∞–≥—Ä—É–∑–∫–∞
                          if (_isLoading) 
                            const SizedBox(
                              width: 12,
                              height: 12,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.orange),
                              ),
                            )
                          else
                            Icon(Icons.check_circle, color: Colors.green, size: 16),
                        ],
                      ),
                    ),
                    GestureDetector(
                      onTap: () => setState(() => _debugMode = false),
                      child: const Icon(
                        Icons.close,
                        color: Colors.white54,
                        size: 16,
                      ),
                    ),
                  ],
                ),
              ),
            ],
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20),
              child: _buildHeroCard(context),
            ),
            const SizedBox(height: 16),
            // –£–±—Ä–∞–ª–∏ –±–ª–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç –≤—Å–µ–≥–¥–∞
            const SizedBox(height: 12),
            Expanded(
              child: Container(
                margin: const EdgeInsets.symmetric(horizontal: 12),
                padding: const EdgeInsets.fromLTRB(8, 0, 8, 8),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(28),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withValues(alpha: 0.05),
                      blurRadius: 18,
                      offset: const Offset(0, 12),
                    )
                  ],
                ),
                child: _buildMessagesList(),
              ),
            ),
            _buildComposer(),
          ],
        ),
      ),
    );
  }

  Widget _buildHeroCard(BuildContext context) {
    final hasTopic = _hasSelectedTopic;
    final topicTitle = hasTopic ? '–¢–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è' : '';

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF6366F1), Color(0xFF8B5CF6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(28),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF312E81).withValues(alpha: 0.25),
            blurRadius: 22,
            offset: const Offset(0, 18),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            hasTopic ? '–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º —Ç–µ–º—É' : 'AIc —Ä—è–¥–æ–º',
            style: _theme?.textTheme.headlineSmall?.copyWith(
              color: Colors.white,
              fontWeight: FontWeight.w700,
            ),
          ),
          const SizedBox(height: 6),
          Text(
            hasTopic
                ? '–ú—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ ¬´$topicTitle¬ª. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ñ–æ–∫—É—Å, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é —Ç–µ–º—É.'
                : '–í—ã–±–µ—Ä–∏ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –ø–æ–¥–¥–µ—Ä–∂—É.',
            style: _theme?.textTheme.bodyMedium?.copyWith(
              color: Colors.white.withValues(alpha: 0.92),
            ),
          ),
          if (hasTopic) ...[
            const SizedBox(height: 12),
            Wrap(
              spacing: 10,
              runSpacing: 10,
              children: [
                _SelectedTopicChip(
                  label: topicTitle,
                  color: Theme.of(context).colorScheme.primary,
                  onChange: () {}, // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏–∫—É
                ),
              ],
            ),
          ],
          const SizedBox(height: 12),
          Wrap(
            spacing: 10,
            runSpacing: 10,
            children: const [
              _QuickLinkChip(
                label: '–ú–µ–¥–∏—Ç–∞—Ü–∏–∏',
                icon: Icons.self_improvement,
                route: '/meditation',
              ),
              _QuickLinkChip(
                label: '–°–æ–≤–µ—Ç—ã',
                icon: Icons.lightbulb_outline,
                route: '/tips',
              ),
              _QuickLinkChip(
                label: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                icon: Icons.volunteer_activism,
                route: '/support',
              ),
            ],
          )
        ],
      ),
    );
  }

  Widget _buildMessagesList() {
    return ListView.builder(
      padding: const EdgeInsets.only(top: 12, bottom: 12),
      itemCount: _messages.length + (_isLoading ? 1 : 0),
      itemBuilder: (_, i) {
        if (i == _messages.length && _isLoading) {
          return const Align(
            alignment: Alignment.centerLeft,
            child: _TypingBubble(),
          );
        }

        final m = _messages[i];
        final isUser = m['role'] == 'user';
        final isSystem = m['role'] == 'system';
        final isError = m['role'] == 'error';

        return Align(
          alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,
          child: _ChatBubble(
            message: m['content'] ?? '',
            isUser: isUser,
            isSystem: isSystem,
            isError: isError,
          ),
        );
      },
    );
  }

  Widget _buildComposer() {
    final enabled = _isConnected && !_isLoading;

    return SafeArea(
      minimum: const EdgeInsets.fromLTRB(20, 12, 20, 20),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(24),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.06),
              blurRadius: 14,
              offset: const Offset(0, 8),
            ),
          ],
        ),
        child: Row(
          children: [
            Expanded(
              child: TextField(
                controller: _controller,
                enabled: enabled,
                minLines: 1,
                maxLines: 4,
                decoration: InputDecoration(
                  hintText: enabled
                      ? (_isLoading ? 'AIc –ø–µ—á–∞—Ç–∞–µ—Ç...' : '–ù–∞–ø–∏—à–∏ AIc...')
                      : '–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...',
                  border: InputBorder.none,
                ),
                onSubmitted: enabled ? (_) => _send() : null,
              ),
            ),
            const SizedBox(width: 8),
            FilledButton.icon(
              onPressed: enabled ? _send : null,
              icon: const Icon(Icons.send_rounded),
              label: const Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );
  }
}

// Helper widgets
class _SelectedTopicChip extends StatelessWidget {
  const _SelectedTopicChip({
    required this.label,
    required this.color,
    required this.onChange,
  });

  final String label;
  final Color color;
  final VoidCallback onChange;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onChange,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 8),
        decoration: BoxDecoration(
          color: color.withValues(alpha: 0.2),
          borderRadius: BorderRadius.circular(18),
          border: Border.all(color: color.withValues(alpha: 0.45), width: 1.2),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.topic_rounded, color: color, size: 16),
            const SizedBox(width: 6),
            Text(
              label,
              style: TextStyle(
                color: Color.lerp(color, Colors.black, 0.2) ?? color,
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(width: 6),
            Icon(Icons.edit_outlined, color: color, size: 14),
          ],
        ),
      ),
    );
  }
}

class _QuickLinkChip extends StatelessWidget {
  const _QuickLinkChip({
    required this.label,
    required this.icon,
    required this.route,
  });

  final String label;
  final IconData icon;
  final String route;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => context.go(route),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 8),
        decoration: BoxDecoration(
          color: Colors.white.withValues(alpha: 0.16),
          borderRadius: BorderRadius.circular(18),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: Colors.white),
            const SizedBox(width: 6),
            Text(
              label,
              style: const TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _ChatBubble extends StatelessWidget {
  const _ChatBubble({
    required this.message,
    required this.isUser,
    required this.isSystem,
    required this.isError,
  });

  final String message;
  final bool isUser;
  final bool isSystem;
  final bool isError;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final bgColor = isUser
        ? theme.colorScheme.primary.withValues(alpha: 0.12)
        : isError
            ? const Color(0xFFFEE2E2)
            : isSystem
                ? const Color(0xFFE0E7FF)
                : const Color(0xFFF1F5F9);

    final textColor = isUser
        ? theme.colorScheme.primary
        : isError
            ? const Color(0xFFB91C1C)
            : Colors.black87;

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 6),
      padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 10),
      constraints: const BoxConstraints(maxWidth: 320),
      decoration: BoxDecoration(
        color: bgColor,
        borderRadius: BorderRadius.only(
          topLeft: const Radius.circular(18),
          topRight: const Radius.circular(18),
          bottomLeft: Radius.circular(isUser ? 18 : 6),
          bottomRight: Radius.circular(isUser ? 6 : 18),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.04),
            blurRadius: 12,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      child: Text(
        message,
        style: theme.textTheme.bodyMedium?.copyWith(
          color: textColor,
          height: 1.35,
        ),
      ),
    );
  }
}

class _TypingBubble extends StatelessWidget {
  const _TypingBubble();

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 6),
      padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 10),
      decoration: BoxDecoration(
        color: const Color(0xFFE5EDFF),
        borderRadius: BorderRadius.circular(18),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: const [
          SizedBox(
            height: 16,
            width: 16,
            child: CircularProgressIndicator(strokeWidth: 2),
          ),
          SizedBox(width: 8),
          Text('AIc –ø–µ—á–∞—Ç–∞–µ—Ç...'),
        ],
      ),
    );
  }
}

class _StatusPill extends StatelessWidget {
  const _StatusPill({required this.isConnected});

  final bool isConnected;

  @override
  Widget build(BuildContext context) {
    final color =
        isConnected ? const Color(0xFF22C55E) : const Color(0xFFEF4444);
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: color.withValues(alpha: 0.16),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            isConnected ? Icons.wifi_rounded : Icons.wifi_off_rounded,
            color: color,
            size: 16,
          ),
          const SizedBox(width: 6),
          Text(
            isConnected ? '–í —Å–µ—Ç–∏' : '–û—Ñ—Ñ–ª–∞–π–Ω',
            style: TextStyle(
              color: color,
              fontWeight: FontWeight.w600,
              fontSize: 12,
            ),
          ),
        ],
      ),
    );
  }
}
