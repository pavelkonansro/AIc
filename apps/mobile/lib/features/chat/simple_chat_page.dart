import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_chat_ui/flutter_chat_ui.dart';
import 'package:flutter_chat_types/flutter_chat_types.dart' as types;
import 'package:uuid/uuid.dart';
import 'dart:math';

class SimpleChatPage extends ConsumerStatefulWidget {
  const SimpleChatPage({super.key});

  @override
  ConsumerState<SimpleChatPage> createState() => _SimpleChatPageState();
}

class _SimpleChatPageState extends ConsumerState<SimpleChatPage> {
  List<types.Message> _messages = [];
  final _user = const types.User(id: 'user');
  final _assistant = const types.User(id: 'assistant', firstName: 'AIc');

  @override
  void initState() {
    super.initState();
    _loadMessages();
  }

  void _loadMessages() {
    final welcomeMessage = types.TextMessage(
      author: _assistant,
      createdAt: DateTime.now().millisecondsSinceEpoch,
      id: const Uuid().v4(),
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø AIc - —Ç–≤–æ–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω. –ö–∞–∫ –¥–µ–ª–∞? üòä',
    );

    setState(() {
      _messages = [welcomeMessage];
    });
  }

  void _addMessage(types.Message message) {
    setState(() {
      _messages.insert(0, message);
    });
  }

  void _handleSendPressed(types.PartialText message) {
    final textMessage = types.TextMessage(
      author: _user,
      createdAt: DateTime.now().millisecondsSinceEpoch,
      id: const Uuid().v4(),
      text: message.text,
    );

    _addMessage(textMessage);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    _simulateAssistantResponse(message.text);
  }

  void _simulateAssistantResponse(String userMessage) {
    Future.delayed(const Duration(milliseconds: 1000), () {
      final responses = [
        '–ü–æ–Ω–∏–º–∞—é, —Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º ü§î',
        '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ö–∞–∫ —Ç—ã –∫ —ç—Ç–æ–º—É –æ—Ç–Ω–æ—Å–∏—à—å—Å—è?',
        '–Ø —Å–ª—É—à–∞—é —Ç–µ–±—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ ‚ú®',
        '–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ?',
        '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —ç—Ç–∏–º —Å–æ –º–Ω–æ–π üíô',
        '–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º?',
        '–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ ü§ù',
      ];

      final randomResponse = responses[Random().nextInt(responses.length)];

      final assistantMessage = types.TextMessage(
        author: _assistant,
        createdAt: DateTime.now().millisecondsSinceEpoch,
        id: const Uuid().v4(),
        text: randomResponse,
      );

      _addMessage(assistantMessage);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Chat —Å AIc'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: Chat(
        messages: _messages,
        onSendPressed: _handleSendPressed,
        user: _user,
        theme: const DefaultChatTheme(
          backgroundColor: Colors.white,
          primaryColor: Colors.blue,
          secondaryColor: Color(0xFFF5F5F5),
        ),
        showUserAvatars: false,
        showUserNames: true,
      ),
    );
  }
}