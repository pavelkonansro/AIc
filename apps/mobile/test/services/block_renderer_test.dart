import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import 'package:aic_mobile/services/block_renderer.dart';

void main() {
  group('Dynamic Content System Tests', () {
    testWidgets('should render hero_card block', (tester) async {
      final blockData = {
        'type': 'hero_card',
        'title': '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
        'subtitle': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫',
        'background_color': '#FFE0E0E0',
        'text_color': '#FF000000',
      };

      await tester.pumpWidget(
        ProviderScope(
          child: MaterialApp(
            home: Scaffold(
              body: BlockRenderer(blockData: blockData),
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Assert
      expect(find.text('–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫'), findsOneWidget);
      expect(find.text('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫'), findsOneWidget);
    });

    testWidgets('should render mood_selector block', (tester) async {
      final blockData = {
        'type': 'mood_selector',
        'title': '–ö–∞–∫ –¥–µ–ª–∞?',
        'moods': [
          {'emoji': 'üòä', 'label': '–•–æ—Ä–æ—à–æ'},
          {'emoji': 'üòê', 'label': '–ù–æ—Ä–º–∞–ª—å–Ω–æ'},
          {'emoji': 'üòû', 'label': '–ü–ª–æ—Ö–æ'},
        ],
      };

      await tester.pumpWidget(
        ProviderScope(
          child: MaterialApp(
            home: Scaffold(
              body: BlockRenderer(blockData: blockData),
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Assert
      expect(find.text('–ö–∞–∫ –¥–µ–ª–∞?'), findsOneWidget);
      expect(find.text('üòä'), findsOneWidget);
      expect(find.text('üòê'), findsOneWidget);
      expect(find.text('üòû'), findsOneWidget);
    });

    testWidgets('should render streak_card block', (tester) async {
      final blockData = {
        'type': 'streak_card',
        'title': '–¢–≤–æ—è —Å–µ—Ä–∏—è',
        'subtitle': '–¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        'icon': 'flame',
      };

      await tester.pumpWidget(
        ProviderScope(
          child: MaterialApp(
            home: Scaffold(
              body: BlockRenderer(blockData: blockData),
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Assert
      expect(find.text('–¢–≤–æ—è —Å–µ—Ä–∏—è'), findsOneWidget);
      expect(find.text('–¥–Ω–µ–π –ø–æ–¥—Ä—è–¥'), findsOneWidget);
    });

    testWidgets('should render quick_actions block', (tester) async {
      final blockData = {
        'type': 'quick_actions',
        'title': '–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
        'actions': [
          {
            'title': '–ß–∞—Ç',
            'subtitle': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ê–π–∫–æ–º',
            'icon': 'chat',
            'color': '#FF2196F3',
            'route': '/chat',
          },
          {
            'title': '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
            'subtitle': '–†–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è',
            'icon': 'self_improvement', 
            'color': '#FF4CAF50',
            'route': '/meditation',
          },
        ],
      };

      await tester.pumpWidget(
        ProviderScope(
          child: MaterialApp(
            home: Scaffold(
              body: BlockRenderer(blockData: blockData),
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Assert
      expect(find.text('–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è'), findsOneWidget);
      expect(find.text('–ß–∞—Ç'), findsOneWidget);
      expect(find.text('–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ê–π–∫–æ–º'), findsOneWidget);
      expect(find.text('–ú–µ–¥–∏—Ç–∞—Ü–∏—è'), findsOneWidget);
      expect(find.text('–†–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è'), findsOneWidget);
    });

    testWidgets('should render category_grid block', (tester) async {
      final blockData = {
        'type': 'category_grid',
        'title': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
        'categories': [
          {
            'title': '–≠–º–æ—Ü–∏–∏',
            'icon': 'favorite',
            'color': '#FFFF5722',
            'route': '/emotions',
          },
          {
            'title': '–£—á–µ–±–∞',
            'icon': 'school',
            'color': '#FF9C27B0',
            'route': '/study',
          },
        ],
      };

      await tester.pumpWidget(
        ProviderScope(
          child: MaterialApp(
            home: Scaffold(
              body: BlockRenderer(blockData: blockData),
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Assert
      expect(find.text('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'), findsOneWidget);
      expect(find.text('–≠–º–æ—Ü–∏–∏'), findsOneWidget);
      expect(find.text('–£—á–µ–±–∞'), findsOneWidget);
    });

    testWidgets('should handle unknown block type gracefully', (tester) async {
      final blockData = {
        'type': 'unknown_block_type',
        'title': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫',
      };

      await tester.pumpWidget(
        ProviderScope(
          child: MaterialApp(
            home: Scaffold(
              body: BlockRenderer(blockData: blockData),
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Should not crash and show some fallback
      expect(tester.takeException(), isNull);
      expect(find.byType(Container), findsAtLeastNWidgets(1));
    });

    testWidgets('should handle tap events on quick actions', (tester) async {
      final blockData = {
        'type': 'quick_actions',
        'title': '–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
        'actions': [
          {
            'title': '–ß–∞—Ç',
            'subtitle': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ê–π–∫–æ–º',
            'icon': 'chat',
            'color': '#FF2196F3',
            'route': '/chat',
          },
        ],
      };

      await tester.pumpWidget(
        ProviderScope(
          child: MaterialApp(
            home: Scaffold(
              body: BlockRenderer(blockData: blockData),
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Try tapping the action - should not crash
      await tester.tap(find.text('–ß–∞—Ç'));
      await tester.pump();

      expect(tester.takeException(), isNull);
    });
  });
}