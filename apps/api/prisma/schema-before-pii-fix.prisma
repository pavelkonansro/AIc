generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ===== CORE USER SYSTEM =====

model User {
  id             String   @id @default(uuid())
  role           String   @default("child") // child, guardian, admin
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tz             String?
  locale         String   @default("ru")
  birthdate      DateTime? // для возрастных политик
  consentVersion Int      @default(1)

  // Relations
  childLinks     GuardianLink[] @relation("ChildUser")
  guardianLinks  GuardianLink[] @relation("GuardianUser") 
  consents       Consent[]
  progress       Progress[]
  sessions       Session[]
  feedback       Feedback[]
  pushTokens     PushToken[]
  chatSessions   ChatSession[]
  safetyLogs     SafetyLog[]
  purchases      Purchase[]

  @@map("users")
}

// Родитель ↔ ребёнок (многие-ко-многим)
model GuardianLink {
  id          BigInt   @id @default(autoincrement())
  guardianId  String
  childId     String
  createdAt   DateTime @default(now())

  guardian User @relation("GuardianUser", fields: [guardianId], references: [id], onDelete: Cascade)
  child    User @relation("ChildUser", fields: [childId], references: [id], onDelete: Cascade)

  @@unique([guardianId, childId])
  @@map("guardian_links")
}

// Согласия (минимизируем PII)
model Consent {
  id          BigInt   @id @default(autoincrement())
  userId      String
  givenAt     DateTime @default(now())
  consentType String   // tos, privacy, parental
  version     Int
  scope       String?  // например: "analytics_basic"
  meta        Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("consents")
}

// ===== PROGRESS & SESSIONS =====

// Профиль прогресса (без чувствительных текстов)
model Progress {
  id       BigInt   @id @default(autoincrement())
  userId   String
  moduleId String   // из CMS/id контента
  stepKey  String   // ключ шага/сцены
  state    Json?    // текущее состояние/результаты (минимум данных)
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId, stepKey])
  @@map("progress")
}

// Сессии взаимодействия (агрегация для аналитики без PII)
model Session {
  id         String    @id @default(uuid())
  userId     String
  startedAt  DateTime  @default(now())
  endedAt    DateTime?
  device     String?
  appVersion String?
  meta       Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ===== CHAT SYSTEM =====

model ChatSession {
  id        String        @id @default(uuid())
  userId    String
  startedAt DateTime      @default(now())
  endedAt   DateTime?
  status    String        @default("active") // active, ended, paused
  messages  ChatMessage[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id         String      @id @default(uuid())
  sessionId  String
  role       String      // user/assistant/system
  content    String
  safetyFlag String?     // safe/warning/blocked
  metadata   Json?
  createdAt  DateTime    @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// ===== SAFETY & FEEDBACK =====

model SafetyLog {
  id        String   @id @default(uuid())
  userId    String?
  sessionId String?
  content   String
  flag      String   // safe/warning/blocked
  reason    String?
  action    String?  // none/warning/block/escalate
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([flag])
  @@index([createdAt])
  @@map("safety_logs")
}

// Обратная связь (контролируемый словарь)
model Feedback {
  id        BigInt   @id @default(autoincrement())
  userId    String?
  createdAt DateTime @default(now())
  rating    Int?     // 1-5
  category  String?  // ux, content, bug, other
  comment   String?  // max 2000 chars

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("feedback")
}

// ===== CONTENT & CONFIG =====

// Remote config / feature flags
model RemoteConfig {
  key         String   @id
  value       Json
  description String?
  updatedAt   DateTime @default(now()) @updatedAt
  audience    Json?    // правила таргетинга (age, locale, role)

  @@map("remote_config")
}

model Article {
  id          String   @id @default(uuid())
  locale      String
  topic       String
  title       String
  body        String
  version     Int      @default(1)
  isPublished Boolean  @default(false)
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([locale, topic])
  @@index([isPublished])
  @@map("articles")
}

model SosContact {
  id        String   @id @default(uuid())
  country   String
  locale    String
  ctype     String   // emergency, mental-health, abuse, etc.
  name      String
  phone     String?
  url       String?
  hours     String?
  priority  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([country, locale])
  @@index([isActive])
  @@map("sos_contacts")
}

// ===== NOTIFICATIONS & DEVICES =====

// Push-токены устройств
model PushToken {
  id          BigInt    @id @default(autoincrement())
  userId      String
  platform    String    // ios, android
  token       String
  createdAt   DateTime  @default(now())
  lastSeenAt  DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
  @@map("push_tokens")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String?  // null for broadcast notifications
  type      String   // reminder, update, emergency, etc.
  title     String
  body      String
  data      Json?
  isSent    Boolean  @default(false)
  sentAt    DateTime?
  createdAt DateTime @default(now())

  deliveries NotificationDelivery[]

  @@index([userId, isSent])
  @@index([type])
  @@map("notifications")
}

model NotificationDevice {
  id          String   @id @default(uuid())
  userId      String?
  platform    String   // ios/android/web
  deviceToken String   @unique
  appVersion  String?
  locale      String?
  metadata    Json?
  isActive    Boolean  @default(true)
  disabledAt  DateTime?
  lastSeenAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deliveries NotificationDelivery[]

  @@index([userId, isActive])
  @@map("notification_devices")
}

model NotificationDelivery {
  id             String      @id @default(uuid())
  notificationId String
  deviceId       String
  status         String      @default("pending") // pending/sent/failed
  error          String?
  sentAt         DateTime?
  createdAt      DateTime    @default(now())

  notification Notification       @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  device       NotificationDevice @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([deviceId])
  @@map("notification_deliveries")
}

// ===== PURCHASES =====

model Purchase {
  id              String    @id @default(uuid())
  userId          String
  platform        String    // ios/android/web
  productId       String
  transactionId   String?   @unique
  status          String    // active/canceled/expired/pending
  purchaseDate    DateTime  @default(now())
  expiryDate      DateTime?
  renewedAt       DateTime?
  revenuecatId    String?
  originalJson    Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@map("purchases")
}