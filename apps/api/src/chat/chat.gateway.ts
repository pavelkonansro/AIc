import {
  WebSocketGateway,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  OnGatewayConnection,
  OnGatewayDisconnect,
  WebSocketServer,
} from '@nestjs/websockets';
import { Socket, Server } from 'socket.io';
import { ChatService } from './chat.service';

@WebSocketGateway({ 
  cors: { origin: /localhost/ },
  namespace: '/chat',
})
export class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer()
  server: Server;

  private readonly sessionClients = new Map<string, Set<string>>();
  private readonly clientSessions = new Map<string, string>();

  constructor(private readonly chatService: ChatService) {}

  async handleConnection(client: Socket) {
    console.log(`–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${client.id}`);
  }

  async handleDisconnect(client: Socket) {
    console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${client.id}`);
    this.unregisterClientSession(client);
  }

  @SubscribeMessage('join_session')
  async handleJoinSession(
    @MessageBody() data: { sessionId: string },
    @ConnectedSocket() client: Socket,
  ) {
    // –ü–æ–∫–∏–¥–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
    const rooms = Array.from(client.rooms);
    rooms.forEach(room => {
      if (room !== client.id) { // –ù–µ –ø–æ–∫–∏–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        client.leave(room);
      }
    });

    this.unregisterClientSession(client);

    // –ó–∞—Ç–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    client.join(data.sessionId);
    this.registerClientSession(client, data.sessionId);
    console.log(`–ö–ª–∏–µ–Ω—Ç ${client.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ ${data.sessionId}`);

    return { event: 'joined_session', data: { sessionId: data.sessionId } };
  }

  @SubscribeMessage('chat:message')
  async handleMessage(
    @MessageBody() data: { sessionId: string; text: string },
    @ConnectedSocket() client: Socket,
  ) {
    const { sessionId, text } = data;

    try {
      console.log(`üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${client.id} –≤ —Å–µ—Å—Å–∏–∏ ${sessionId}: "${text}"`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const roomClients = await this.server.in(sessionId).fetchSockets();
      console.log(`üë• –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${sessionId}: ${roomClients.length}`);

      // –≠–º–∏—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏ (–∏—Å–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
      client.to(sessionId).emit('message', {
        role: 'user',
        content: text,
        timestamp: new Date().toISOString(),
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
      this.server.in(sessionId).emit('typing', {
        isTyping: true,
        timestamp: new Date().toISOString(),
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
      const shouldSendPush = this.shouldQueuePush(sessionId);
      const aiResponse = await this.chatService.processUserMessage(sessionId, text, {
        deliverPush: shouldSendPush,
        data: {
          transport: 'socket',
        },
      });

      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
      this.server.in(sessionId).emit('typing', {
        isTyping: false,
        timestamp: new Date().toISOString(),
      });

      // –≠–º–∏—Ç–∏–º –æ—Ç–≤–µ—Ç AI –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏ (–≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
      this.server.in(sessionId).emit('message', {
        role: 'assistant',
        content: aiResponse.message,
        timestamp: new Date().toISOString(),
        model: aiResponse.model,
        provider: aiResponse.provider,
        usage: aiResponse.usage
      });

      return {
        event: 'message_sent',
        data: {
          userMessage: {
            role: 'user',
            content: text,
            timestamp: new Date().toISOString(),
          },
          aiMessage: {
            role: 'assistant',
            content: aiResponse.message,
            timestamp: new Date().toISOString(),
            model: aiResponse.model,
            provider: aiResponse.provider,
            usage: aiResponse.usage
          },
        },
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);

      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.server.in(sessionId).emit('typing', {
        isTyping: false,
        timestamp: new Date().toISOString(),
      });

      this.server.in(sessionId).emit('error', {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
        timestamp: new Date().toISOString(),
      });
      return {
        event: 'error',
        data: { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' },
      };
    }
  }

  private registerClientSession(client: Socket, sessionId: string) {
    client.data.sessionId = sessionId;

    const previousSessionId = this.clientSessions.get(client.id);
    if (previousSessionId && previousSessionId !== sessionId) {
      const previousClients = this.sessionClients.get(previousSessionId);
      previousClients?.delete(client.id);
      if (previousClients && previousClients.size === 0) {
        this.sessionClients.delete(previousSessionId);
      }
    }

    let clients = this.sessionClients.get(sessionId);
    if (!clients) {
      clients = new Set<string>();
      this.sessionClients.set(sessionId, clients);
    }

    clients.add(client.id);
    this.clientSessions.set(client.id, sessionId);
  }

  private unregisterClientSession(client: Socket) {
    const sessionId = this.clientSessions.get(client.id) || client.data?.sessionId;
    if (!sessionId) {
      return;
    }

    client.data.sessionId = undefined;
    this.clientSessions.delete(client.id);

    const clients = this.sessionClients.get(sessionId);
    if (!clients) {
      return;
    }

    clients.delete(client.id);
    if (clients.size === 0) {
      this.sessionClients.delete(sessionId);
    }
  }

  private shouldQueuePush(sessionId: string): boolean {
    const clients = this.sessionClients.get(sessionId);
    return !clients || clients.size === 0;
  }
}
